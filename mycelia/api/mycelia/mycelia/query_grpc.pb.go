// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: mycelia/mycelia/query.proto

package mycelia

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName          = "/mycelia.mycelia.Query/Params"
	Query_Round1Data_FullMethodName      = "/mycelia.mycelia.Query/Round1Data"
	Query_Round2Data_FullMethodName      = "/mycelia.mycelia.Query/Round2Data"
	Query_Commits_FullMethodName         = "/mycelia.mycelia.Query/Commits"
	Query_SignatureShares_FullMethodName = "/mycelia.mycelia.Query/SignatureShares"
	Query_DataRequests_FullMethodName    = "/mycelia.mycelia.Query/DataRequests"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Round1Data queries the the round 1 data of all the participants in the dkg
	Round1Data(ctx context.Context, in *QueryRound1Data, opts ...grpc.CallOption) (*QueryRound1DataResponse, error)
	// Round2Data queries the the round 2 data of all the participants in the dkg
	Round2Data(ctx context.Context, in *QueryRound2Data, opts ...grpc.CallOption) (*QueryRound2DataResponse, error)
	// Commits queries the commits of all the participants
	Commits(ctx context.Context, in *QueryCommits, opts ...grpc.CallOption) (*QueryCommitsResponse, error)
	// SignatureShares queries the signature shares of all the participants
	SignatureShares(ctx context.Context, in *QuerySignatureSharesRequest, opts ...grpc.CallOption) (*QuerySignatureSharesResponse, error)
	DataRequests(ctx context.Context, in *QueryRequests, opts ...grpc.CallOption) (*QueryRequestsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Round1Data(ctx context.Context, in *QueryRound1Data, opts ...grpc.CallOption) (*QueryRound1DataResponse, error) {
	out := new(QueryRound1DataResponse)
	err := c.cc.Invoke(ctx, Query_Round1Data_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Round2Data(ctx context.Context, in *QueryRound2Data, opts ...grpc.CallOption) (*QueryRound2DataResponse, error) {
	out := new(QueryRound2DataResponse)
	err := c.cc.Invoke(ctx, Query_Round2Data_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Commits(ctx context.Context, in *QueryCommits, opts ...grpc.CallOption) (*QueryCommitsResponse, error) {
	out := new(QueryCommitsResponse)
	err := c.cc.Invoke(ctx, Query_Commits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignatureShares(ctx context.Context, in *QuerySignatureSharesRequest, opts ...grpc.CallOption) (*QuerySignatureSharesResponse, error) {
	out := new(QuerySignatureSharesResponse)
	err := c.cc.Invoke(ctx, Query_SignatureShares_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DataRequests(ctx context.Context, in *QueryRequests, opts ...grpc.CallOption) (*QueryRequestsResponse, error) {
	out := new(QueryRequestsResponse)
	err := c.cc.Invoke(ctx, Query_DataRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Round1Data queries the the round 1 data of all the participants in the dkg
	Round1Data(context.Context, *QueryRound1Data) (*QueryRound1DataResponse, error)
	// Round2Data queries the the round 2 data of all the participants in the dkg
	Round2Data(context.Context, *QueryRound2Data) (*QueryRound2DataResponse, error)
	// Commits queries the commits of all the participants
	Commits(context.Context, *QueryCommits) (*QueryCommitsResponse, error)
	// SignatureShares queries the signature shares of all the participants
	SignatureShares(context.Context, *QuerySignatureSharesRequest) (*QuerySignatureSharesResponse, error)
	DataRequests(context.Context, *QueryRequests) (*QueryRequestsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) Round1Data(context.Context, *QueryRound1Data) (*QueryRound1DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Round1Data not implemented")
}
func (UnimplementedQueryServer) Round2Data(context.Context, *QueryRound2Data) (*QueryRound2DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Round2Data not implemented")
}
func (UnimplementedQueryServer) Commits(context.Context, *QueryCommits) (*QueryCommitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commits not implemented")
}
func (UnimplementedQueryServer) SignatureShares(context.Context, *QuerySignatureSharesRequest) (*QuerySignatureSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignatureShares not implemented")
}
func (UnimplementedQueryServer) DataRequests(context.Context, *QueryRequests) (*QueryRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataRequests not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Round1Data_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRound1Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Round1Data(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Round1Data_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Round1Data(ctx, req.(*QueryRound1Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Round2Data_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRound2Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Round2Data(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Round2Data_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Round2Data(ctx, req.(*QueryRound2Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Commits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCommits)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Commits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Commits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Commits(ctx, req.(*QueryCommits))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignatureShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySignatureSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignatureShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_SignatureShares_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignatureShares(ctx, req.(*QuerySignatureSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DataRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DataRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DataRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DataRequests(ctx, req.(*QueryRequests))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mycelia.mycelia.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Round1Data",
			Handler:    _Query_Round1Data_Handler,
		},
		{
			MethodName: "Round2Data",
			Handler:    _Query_Round2Data_Handler,
		},
		{
			MethodName: "Commits",
			Handler:    _Query_Commits_Handler,
		},
		{
			MethodName: "SignatureShares",
			Handler:    _Query_SignatureShares_Handler,
		},
		{
			MethodName: "DataRequests",
			Handler:    _Query_DataRequests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mycelia/mycelia/query.proto",
}
