syntax = "proto3";
package mycelia.mycelia;

import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "mycelia/mycelia/params.proto";

option go_package = "github.com/jaydenwindle/ethdenver-2024/mycelia/x/mycelia/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/ethdenver-2024/mycelia/mycelia/params";
  }

  // Round1Data queries the the round 1 data of all the participants in the dkg
  rpc Round1Data(QueryRound1Data) returns (QueryRound1DataResponse) {
    option (google.api.http).get = "/ethdenver-2024/mycelia/mycelia/round1data";
  }

  // Round2Data queries the the round 2 data of all the participants in the dkg
  rpc Round2Data(QueryRound2Data) returns (QueryRound2DataResponse) {
    option (google.api.http).get = "/ethdenver-2024/mycelia/mycelia/round2data/{identifier}";
  }

  // Commits queries the commits of all the participants in the dkg
  rpc Commits(QueryCommits) returns (QueryCommitsResponse) {
    option (google.api.http).get = "/ethdenver-2024/mycelia/mycelia/commits";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QueryRound1Data is request type for the Query/Round1Data RPC method.
message QueryRound1Data {}

// QueryRound1DataResponse is response type for the Query/Round1Data RPC method.
message QueryRound1DataResponse { bytes accumlated_round_1_data = 1; }

// QueryRound2Data is request type for the Query/Round2Data RPC method.
message QueryRound2Data { string identifier = 1; }

// QueryRound2DataResponse is response type for the Query/Round2Data RPC method.
message QueryRound2DataResponse { bytes accumlated_round_2_data = 1; }

// QueryCommits is request type for the Query/Commits RPC method.
message QueryCommits {}

// QueryRound1DataResponse is response type for the Query/Commits RPC method.
message QueryCommitsResponse { bytes commits = 1; }