// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mycelia/mycelia/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7a3fad1d049c3d, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7a3fad1d049c3d, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryRound1Data is request type for the Query/Round1Data RPC method.
type QueryRound1Data struct {
}

func (m *QueryRound1Data) Reset()         { *m = QueryRound1Data{} }
func (m *QueryRound1Data) String() string { return proto.CompactTextString(m) }
func (*QueryRound1Data) ProtoMessage()    {}
func (*QueryRound1Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7a3fad1d049c3d, []int{2}
}
func (m *QueryRound1Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRound1Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRound1Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRound1Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRound1Data.Merge(m, src)
}
func (m *QueryRound1Data) XXX_Size() int {
	return m.Size()
}
func (m *QueryRound1Data) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRound1Data.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRound1Data proto.InternalMessageInfo

// QueryRound1DataResponse is response type for the Query/Round1Data RPC method.
type QueryRound1DataResponse struct {
	AccumlatedRound_1Data []byte `protobuf:"bytes,1,opt,name=accumlated_round_1_data,json=accumlatedRound1Data,proto3" json:"accumlated_round_1_data,omitempty"`
}

func (m *QueryRound1DataResponse) Reset()         { *m = QueryRound1DataResponse{} }
func (m *QueryRound1DataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRound1DataResponse) ProtoMessage()    {}
func (*QueryRound1DataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7a3fad1d049c3d, []int{3}
}
func (m *QueryRound1DataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRound1DataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRound1DataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRound1DataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRound1DataResponse.Merge(m, src)
}
func (m *QueryRound1DataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRound1DataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRound1DataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRound1DataResponse proto.InternalMessageInfo

func (m *QueryRound1DataResponse) GetAccumlatedRound_1Data() []byte {
	if m != nil {
		return m.AccumlatedRound_1Data
	}
	return nil
}

// QueryRound2Data is request type for the Query/Round2Data RPC method.
type QueryRound2Data struct {
	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (m *QueryRound2Data) Reset()         { *m = QueryRound2Data{} }
func (m *QueryRound2Data) String() string { return proto.CompactTextString(m) }
func (*QueryRound2Data) ProtoMessage()    {}
func (*QueryRound2Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7a3fad1d049c3d, []int{4}
}
func (m *QueryRound2Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRound2Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRound2Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRound2Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRound2Data.Merge(m, src)
}
func (m *QueryRound2Data) XXX_Size() int {
	return m.Size()
}
func (m *QueryRound2Data) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRound2Data.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRound2Data proto.InternalMessageInfo

func (m *QueryRound2Data) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

// QueryRound2DataResponse is response type for the Query/Round2Data RPC method.
type QueryRound2DataResponse struct {
	AccumlatedRound_2Data []byte `protobuf:"bytes,1,opt,name=accumlated_round_2_data,json=accumlatedRound2Data,proto3" json:"accumlated_round_2_data,omitempty"`
}

func (m *QueryRound2DataResponse) Reset()         { *m = QueryRound2DataResponse{} }
func (m *QueryRound2DataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRound2DataResponse) ProtoMessage()    {}
func (*QueryRound2DataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7a3fad1d049c3d, []int{5}
}
func (m *QueryRound2DataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRound2DataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRound2DataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRound2DataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRound2DataResponse.Merge(m, src)
}
func (m *QueryRound2DataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRound2DataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRound2DataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRound2DataResponse proto.InternalMessageInfo

func (m *QueryRound2DataResponse) GetAccumlatedRound_2Data() []byte {
	if m != nil {
		return m.AccumlatedRound_2Data
	}
	return nil
}

// QueryCommits is request type for the Query/Commits RPC method.
type QueryCommits struct {
}

func (m *QueryCommits) Reset()         { *m = QueryCommits{} }
func (m *QueryCommits) String() string { return proto.CompactTextString(m) }
func (*QueryCommits) ProtoMessage()    {}
func (*QueryCommits) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7a3fad1d049c3d, []int{6}
}
func (m *QueryCommits) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCommits) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCommits.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCommits) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCommits.Merge(m, src)
}
func (m *QueryCommits) XXX_Size() int {
	return m.Size()
}
func (m *QueryCommits) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCommits.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCommits proto.InternalMessageInfo

// QueryRound1DataResponse is response type for the Query/Commits RPC method.
type QueryCommitsResponse struct {
	Commits []byte `protobuf:"bytes,1,opt,name=commits,proto3" json:"commits,omitempty"`
}

func (m *QueryCommitsResponse) Reset()         { *m = QueryCommitsResponse{} }
func (m *QueryCommitsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCommitsResponse) ProtoMessage()    {}
func (*QueryCommitsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7a3fad1d049c3d, []int{7}
}
func (m *QueryCommitsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCommitsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCommitsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCommitsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCommitsResponse.Merge(m, src)
}
func (m *QueryCommitsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCommitsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCommitsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCommitsResponse proto.InternalMessageInfo

func (m *QueryCommitsResponse) GetCommits() []byte {
	if m != nil {
		return m.Commits
	}
	return nil
}

// QuerySignatureSharesRequest is request type for the Query/SignatureShares RPC method.
type QuerySignatureSharesRequest struct {
}

func (m *QuerySignatureSharesRequest) Reset()         { *m = QuerySignatureSharesRequest{} }
func (m *QuerySignatureSharesRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySignatureSharesRequest) ProtoMessage()    {}
func (*QuerySignatureSharesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7a3fad1d049c3d, []int{8}
}
func (m *QuerySignatureSharesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySignatureSharesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySignatureSharesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySignatureSharesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySignatureSharesRequest.Merge(m, src)
}
func (m *QuerySignatureSharesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySignatureSharesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySignatureSharesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySignatureSharesRequest proto.InternalMessageInfo

// QuerySignatureSharesResponse is response type for the Query/SignatureShares RPC method.
type QuerySignatureSharesResponse struct {
	SignatureShares [][]byte `protobuf:"bytes,1,rep,name=signature_shares,json=signatureShares,proto3" json:"signature_shares,omitempty"`
}

func (m *QuerySignatureSharesResponse) Reset()         { *m = QuerySignatureSharesResponse{} }
func (m *QuerySignatureSharesResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySignatureSharesResponse) ProtoMessage()    {}
func (*QuerySignatureSharesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7b7a3fad1d049c3d, []int{9}
}
func (m *QuerySignatureSharesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySignatureSharesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySignatureSharesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySignatureSharesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySignatureSharesResponse.Merge(m, src)
}
func (m *QuerySignatureSharesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySignatureSharesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySignatureSharesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySignatureSharesResponse proto.InternalMessageInfo

func (m *QuerySignatureSharesResponse) GetSignatureShares() [][]byte {
	if m != nil {
		return m.SignatureShares
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "mycelia.mycelia.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "mycelia.mycelia.QueryParamsResponse")
	proto.RegisterType((*QueryRound1Data)(nil), "mycelia.mycelia.QueryRound1Data")
	proto.RegisterType((*QueryRound1DataResponse)(nil), "mycelia.mycelia.QueryRound1DataResponse")
	proto.RegisterType((*QueryRound2Data)(nil), "mycelia.mycelia.QueryRound2Data")
	proto.RegisterType((*QueryRound2DataResponse)(nil), "mycelia.mycelia.QueryRound2DataResponse")
	proto.RegisterType((*QueryCommits)(nil), "mycelia.mycelia.QueryCommits")
	proto.RegisterType((*QueryCommitsResponse)(nil), "mycelia.mycelia.QueryCommitsResponse")
	proto.RegisterType((*QuerySignatureSharesRequest)(nil), "mycelia.mycelia.QuerySignatureSharesRequest")
	proto.RegisterType((*QuerySignatureSharesResponse)(nil), "mycelia.mycelia.QuerySignatureSharesResponse")
}

func init() { proto.RegisterFile("mycelia/mycelia/query.proto", fileDescriptor_7b7a3fad1d049c3d) }

var fileDescriptor_7b7a3fad1d049c3d = []byte{
	// 580 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0x3d, 0x6f, 0xd3, 0x40,
	0x18, 0xc7, 0x73, 0xa0, 0xa6, 0xea, 0x11, 0x11, 0x7a, 0x44, 0x4a, 0xe4, 0xb6, 0x26, 0x32, 0x6f,
	0x69, 0xd5, 0xda, 0xcd, 0x01, 0x42, 0x30, 0x80, 0x54, 0x58, 0xd8, 0x5a, 0x77, 0x41, 0x2c, 0xd1,
	0x35, 0x3e, 0x9c, 0x43, 0xf1, 0x5d, 0x6a, 0x9f, 0x81, 0x08, 0x21, 0x21, 0x58, 0x19, 0x90, 0x98,
	0x98, 0x58, 0x19, 0xf9, 0x18, 0x1d, 0x2b, 0xb1, 0xb0, 0x80, 0x50, 0x82, 0xc4, 0xd7, 0x40, 0x3e,
	0x3b, 0xce, 0x4b, 0x4d, 0x5c, 0xb1, 0xf8, 0xee, 0x9e, 0x97, 0xff, 0xf3, 0x93, 0x9e, 0xbf, 0x0c,
	0x57, 0xbc, 0x7e, 0x9b, 0x76, 0x19, 0xb1, 0x46, 0xe7, 0x61, 0x48, 0xfd, 0xbe, 0xd9, 0xf3, 0x85,
	0x14, 0xa8, 0x9c, 0x04, 0xcd, 0xe4, 0xd4, 0x96, 0x89, 0xc7, 0xb8, 0xb0, 0xd4, 0x37, 0xae, 0xd1,
	0x2a, 0xae, 0x70, 0x85, 0xba, 0x5a, 0xd1, 0x2d, 0x89, 0xae, 0xba, 0x42, 0xb8, 0x5d, 0x6a, 0x91,
	0x1e, 0xb3, 0x08, 0xe7, 0x42, 0x12, 0xc9, 0x04, 0x0f, 0x46, 0xd9, 0xd9, 0xa1, 0x3d, 0xe2, 0x13,
	0x2f, 0xc9, 0x1a, 0x15, 0x88, 0xf6, 0x22, 0x88, 0x5d, 0x15, 0xb4, 0xe9, 0x61, 0x48, 0x03, 0x69,
	0xec, 0xc1, 0x8b, 0x53, 0xd1, 0xa0, 0x27, 0x78, 0x40, 0xd1, 0x5d, 0x58, 0x8c, 0x9b, 0x6b, 0xa0,
	0x0e, 0x1a, 0xe7, 0x70, 0xd5, 0x9c, 0x61, 0x36, 0xe3, 0x86, 0x9d, 0xa5, 0xa3, 0x9f, 0x97, 0x0a,
	0x5f, 0xfe, 0x7c, 0xdd, 0x00, 0x76, 0xd2, 0x61, 0x2c, 0xc3, 0xb2, 0x92, 0xb4, 0x45, 0xc8, 0x9d,
	0xe6, 0x43, 0x22, 0x89, 0xb1, 0x0b, 0xab, 0x33, 0xa1, 0x74, 0xd2, 0x2d, 0x58, 0x25, 0xed, 0x76,
	0xe8, 0x75, 0x89, 0xa4, 0x4e, 0xcb, 0x8f, 0x0a, 0x5a, 0xcd, 0x96, 0x43, 0x24, 0x51, 0xa3, 0x4b,
	0x76, 0x65, 0x9c, 0x9e, 0x50, 0x6c, 0x4e, 0x0e, 0xc1, 0x51, 0x08, 0xe9, 0x10, 0x32, 0x87, 0x72,
	0xc9, 0x9e, 0x32, 0xea, 0xab, 0xe6, 0x25, 0x7b, 0x22, 0x32, 0x0d, 0x81, 0x73, 0x21, 0xf0, 0x3c,
	0x08, 0xd5, 0x6e, 0x9c, 0x87, 0x25, 0xa5, 0xf8, 0x40, 0x78, 0x1e, 0x93, 0x81, 0xb1, 0x0d, 0x2b,
	0x93, 0xef, 0x54, 0xbe, 0x06, 0x17, 0xdb, 0x71, 0x28, 0x91, 0x1b, 0x3d, 0x8d, 0x35, 0xb8, 0xa2,
	0x3a, 0xf6, 0x99, 0xcb, 0x89, 0x0c, 0x7d, 0xba, 0xdf, 0x21, 0x3e, 0x4d, 0xb7, 0xf3, 0x08, 0xae,
	0x66, 0xa7, 0x13, 0xe1, 0x75, 0x78, 0x21, 0x18, 0xa5, 0x5a, 0x81, 0xca, 0xd5, 0x40, 0xfd, 0x6c,
	0xa3, 0x64, 0x97, 0x83, 0xe9, 0x16, 0xfc, 0x63, 0x01, 0x2e, 0x28, 0x2d, 0xf4, 0x0e, 0xc0, 0x62,
	0xbc, 0x3d, 0x74, 0xf9, 0xc4, 0x5a, 0x4f, 0x5a, 0x44, 0xbb, 0x32, 0xbf, 0x28, 0x46, 0x31, 0xcc,
	0xb7, 0xdf, 0x7e, 0x7f, 0x3c, 0xd3, 0x40, 0xd7, 0x2c, 0x2a, 0x3b, 0x0e, 0xe5, 0xcf, 0xa9, 0xbf,
	0x85, 0xb7, 0xf1, 0x4d, 0x2b, 0xdb, 0x94, 0xe8, 0x3d, 0x80, 0x70, 0xbc, 0x4f, 0x54, 0xcf, 0x1e,
	0x32, 0xae, 0xd0, 0x1a, 0x79, 0x15, 0x29, 0x0a, 0x56, 0x28, 0x9b, 0x68, 0x23, 0x0f, 0x45, 0x2d,
	0xba, 0x19, 0xad, 0x19, 0x7d, 0x1a, 0xe1, 0xe0, 0x5c, 0x1c, 0x9c, 0x8b, 0x33, 0x65, 0x2e, 0xe3,
	0xbe, 0xc2, 0xb9, 0x83, 0x6e, 0x9f, 0x0a, 0x07, 0x47, 0x38, 0xd6, 0xab, 0xb1, 0x6f, 0x5f, 0xa3,
	0x37, 0x00, 0x2e, 0x26, 0x96, 0x42, 0x6b, 0xd9, 0x63, 0x93, 0xb4, 0x76, 0x75, 0x6e, 0x3a, 0x45,
	0xb2, 0x14, 0xd2, 0x3a, 0xba, 0x9e, 0x87, 0x94, 0xf8, 0x14, 0x7d, 0x06, 0xb0, 0x3c, 0x63, 0x42,
	0xb4, 0x99, 0x3d, 0x2b, 0xdb, 0xca, 0xda, 0xd6, 0x29, 0xab, 0xff, 0x93, 0x70, 0xe7, 0xf1, 0xd1,
	0x40, 0x07, 0xc7, 0x03, 0x1d, 0xfc, 0x1a, 0xe8, 0xe0, 0xc3, 0x50, 0x2f, 0x1c, 0x0f, 0xf5, 0xc2,
	0xf7, 0xa1, 0x5e, 0x78, 0x72, 0xcf, 0x65, 0xb2, 0x13, 0x1e, 0x98, 0x6d, 0xe1, 0x59, 0xcf, 0x48,
	0xdf, 0xa1, 0xfc, 0x05, 0xe3, 0x4e, 0x97, 0xfe, 0x4b, 0xf9, 0x65, 0x7a, 0x93, 0xfd, 0x1e, 0x0d,
	0x0e, 0x8a, 0xea, 0xff, 0x79, 0xe3, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x77, 0xe7, 0x87, 0xd7,
	0xd4, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Round1Data queries the the round 1 data of all the participants in the dkg
	Round1Data(ctx context.Context, in *QueryRound1Data, opts ...grpc.CallOption) (*QueryRound1DataResponse, error)
	// Round2Data queries the the round 2 data of all the participants in the dkg
	Round2Data(ctx context.Context, in *QueryRound2Data, opts ...grpc.CallOption) (*QueryRound2DataResponse, error)
	// Commits queries the commits of all the participants
	Commits(ctx context.Context, in *QueryCommits, opts ...grpc.CallOption) (*QueryCommitsResponse, error)
	// SignatureShares queries the signature shares of all the participants
	SignatureShares(ctx context.Context, in *QuerySignatureSharesRequest, opts ...grpc.CallOption) (*QuerySignatureSharesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/mycelia.mycelia.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Round1Data(ctx context.Context, in *QueryRound1Data, opts ...grpc.CallOption) (*QueryRound1DataResponse, error) {
	out := new(QueryRound1DataResponse)
	err := c.cc.Invoke(ctx, "/mycelia.mycelia.Query/Round1Data", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Round2Data(ctx context.Context, in *QueryRound2Data, opts ...grpc.CallOption) (*QueryRound2DataResponse, error) {
	out := new(QueryRound2DataResponse)
	err := c.cc.Invoke(ctx, "/mycelia.mycelia.Query/Round2Data", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Commits(ctx context.Context, in *QueryCommits, opts ...grpc.CallOption) (*QueryCommitsResponse, error) {
	out := new(QueryCommitsResponse)
	err := c.cc.Invoke(ctx, "/mycelia.mycelia.Query/Commits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignatureShares(ctx context.Context, in *QuerySignatureSharesRequest, opts ...grpc.CallOption) (*QuerySignatureSharesResponse, error) {
	out := new(QuerySignatureSharesResponse)
	err := c.cc.Invoke(ctx, "/mycelia.mycelia.Query/SignatureShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Round1Data queries the the round 1 data of all the participants in the dkg
	Round1Data(context.Context, *QueryRound1Data) (*QueryRound1DataResponse, error)
	// Round2Data queries the the round 2 data of all the participants in the dkg
	Round2Data(context.Context, *QueryRound2Data) (*QueryRound2DataResponse, error)
	// Commits queries the commits of all the participants
	Commits(context.Context, *QueryCommits) (*QueryCommitsResponse, error)
	// SignatureShares queries the signature shares of all the participants
	SignatureShares(context.Context, *QuerySignatureSharesRequest) (*QuerySignatureSharesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Round1Data(ctx context.Context, req *QueryRound1Data) (*QueryRound1DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Round1Data not implemented")
}
func (*UnimplementedQueryServer) Round2Data(ctx context.Context, req *QueryRound2Data) (*QueryRound2DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Round2Data not implemented")
}
func (*UnimplementedQueryServer) Commits(ctx context.Context, req *QueryCommits) (*QueryCommitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commits not implemented")
}
func (*UnimplementedQueryServer) SignatureShares(ctx context.Context, req *QuerySignatureSharesRequest) (*QuerySignatureSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignatureShares not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycelia.mycelia.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Round1Data_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRound1Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Round1Data(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycelia.mycelia.Query/Round1Data",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Round1Data(ctx, req.(*QueryRound1Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Round2Data_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRound2Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Round2Data(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycelia.mycelia.Query/Round2Data",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Round2Data(ctx, req.(*QueryRound2Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Commits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCommits)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Commits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycelia.mycelia.Query/Commits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Commits(ctx, req.(*QueryCommits))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignatureShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySignatureSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignatureShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycelia.mycelia.Query/SignatureShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignatureShares(ctx, req.(*QuerySignatureSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mycelia.mycelia.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Round1Data",
			Handler:    _Query_Round1Data_Handler,
		},
		{
			MethodName: "Round2Data",
			Handler:    _Query_Round2Data_Handler,
		},
		{
			MethodName: "Commits",
			Handler:    _Query_Commits_Handler,
		},
		{
			MethodName: "SignatureShares",
			Handler:    _Query_SignatureShares_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mycelia/mycelia/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRound1Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRound1Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRound1Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRound1DataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRound1DataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRound1DataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccumlatedRound_1Data) > 0 {
		i -= len(m.AccumlatedRound_1Data)
		copy(dAtA[i:], m.AccumlatedRound_1Data)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AccumlatedRound_1Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRound2Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRound2Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRound2Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRound2DataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRound2DataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRound2DataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AccumlatedRound_2Data) > 0 {
		i -= len(m.AccumlatedRound_2Data)
		copy(dAtA[i:], m.AccumlatedRound_2Data)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AccumlatedRound_2Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCommits) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCommits) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCommits) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCommitsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCommitsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCommitsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commits) > 0 {
		i -= len(m.Commits)
		copy(dAtA[i:], m.Commits)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Commits)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySignatureSharesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySignatureSharesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySignatureSharesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QuerySignatureSharesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySignatureSharesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySignatureSharesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignatureShares) > 0 {
		for iNdEx := len(m.SignatureShares) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SignatureShares[iNdEx])
			copy(dAtA[i:], m.SignatureShares[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.SignatureShares[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRound1Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRound1DataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccumlatedRound_1Data)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRound2Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRound2DataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccumlatedRound_2Data)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCommits) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCommitsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Commits)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySignatureSharesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QuerySignatureSharesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SignatureShares) > 0 {
		for _, b := range m.SignatureShares {
			l = len(b)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRound1Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRound1Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRound1Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRound1DataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRound1DataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRound1DataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumlatedRound_1Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccumlatedRound_1Data = append(m.AccumlatedRound_1Data[:0], dAtA[iNdEx:postIndex]...)
			if m.AccumlatedRound_1Data == nil {
				m.AccumlatedRound_1Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRound2Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRound2Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRound2Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRound2DataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRound2DataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRound2DataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumlatedRound_2Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccumlatedRound_2Data = append(m.AccumlatedRound_2Data[:0], dAtA[iNdEx:postIndex]...)
			if m.AccumlatedRound_2Data == nil {
				m.AccumlatedRound_2Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCommits) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCommits: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCommits: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCommitsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCommitsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCommitsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commits", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commits = append(m.Commits[:0], dAtA[iNdEx:postIndex]...)
			if m.Commits == nil {
				m.Commits = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySignatureSharesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySignatureSharesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySignatureSharesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySignatureSharesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySignatureSharesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySignatureSharesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureShares", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureShares = append(m.SignatureShares, make([]byte, postIndex-iNdEx))
			copy(m.SignatureShares[len(m.SignatureShares)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
