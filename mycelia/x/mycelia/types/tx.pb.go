// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mycelia/mycelia/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgUpdateParams is the Msg/UpdateParams request type.
type MsgUpdateParams struct {
	// authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the module parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_240f06b5d3b6e8db, []int{0}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_240f06b5d3b6e8db, []int{1}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgUpdateParams is the Msg/PostRound1Data request type.
type MsgPostRound1Data struct {
	Participant string `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
	Round_1Data []byte `protobuf:"bytes,2,opt,name=round_1_data,json=round1Data,proto3" json:"round_1_data,omitempty"`
}

func (m *MsgPostRound1Data) Reset()         { *m = MsgPostRound1Data{} }
func (m *MsgPostRound1Data) String() string { return proto.CompactTextString(m) }
func (*MsgPostRound1Data) ProtoMessage()    {}
func (*MsgPostRound1Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_240f06b5d3b6e8db, []int{2}
}
func (m *MsgPostRound1Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostRound1Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostRound1Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostRound1Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostRound1Data.Merge(m, src)
}
func (m *MsgPostRound1Data) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostRound1Data) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostRound1Data.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostRound1Data proto.InternalMessageInfo

func (m *MsgPostRound1Data) GetParticipant() string {
	if m != nil {
		return m.Participant
	}
	return ""
}

func (m *MsgPostRound1Data) GetRound_1Data() []byte {
	if m != nil {
		return m.Round_1Data
	}
	return nil
}

// MsgPostRound1DataResponse defines the response structure for executing a
// MsgPostRound1Data message.
type MsgPostRound1DataResponse struct {
}

func (m *MsgPostRound1DataResponse) Reset()         { *m = MsgPostRound1DataResponse{} }
func (m *MsgPostRound1DataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPostRound1DataResponse) ProtoMessage()    {}
func (*MsgPostRound1DataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_240f06b5d3b6e8db, []int{3}
}
func (m *MsgPostRound1DataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostRound1DataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostRound1DataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostRound1DataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostRound1DataResponse.Merge(m, src)
}
func (m *MsgPostRound1DataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostRound1DataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostRound1DataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostRound1DataResponse proto.InternalMessageInfo

// MsgUpdateParams is the Msg/PostRound1Data request type.
type MsgPostRound2Data struct {
	Participant string            `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
	Round_2Data map[string][]byte `protobuf:"bytes,2,rep,name=round_2_data,json=round2Data,proto3" json:"round_2_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *MsgPostRound2Data) Reset()         { *m = MsgPostRound2Data{} }
func (m *MsgPostRound2Data) String() string { return proto.CompactTextString(m) }
func (*MsgPostRound2Data) ProtoMessage()    {}
func (*MsgPostRound2Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_240f06b5d3b6e8db, []int{4}
}
func (m *MsgPostRound2Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostRound2Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostRound2Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostRound2Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostRound2Data.Merge(m, src)
}
func (m *MsgPostRound2Data) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostRound2Data) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostRound2Data.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostRound2Data proto.InternalMessageInfo

func (m *MsgPostRound2Data) GetParticipant() string {
	if m != nil {
		return m.Participant
	}
	return ""
}

func (m *MsgPostRound2Data) GetRound_2Data() map[string][]byte {
	if m != nil {
		return m.Round_2Data
	}
	return nil
}

// MsgPostRound2DataResponse defines the response structure for executing a
// MsgPostRound2Data message.
type MsgPostRound2DataResponse struct {
}

func (m *MsgPostRound2DataResponse) Reset()         { *m = MsgPostRound2DataResponse{} }
func (m *MsgPostRound2DataResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPostRound2DataResponse) ProtoMessage()    {}
func (*MsgPostRound2DataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_240f06b5d3b6e8db, []int{5}
}
func (m *MsgPostRound2DataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostRound2DataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostRound2DataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostRound2DataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostRound2DataResponse.Merge(m, src)
}
func (m *MsgPostRound2DataResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostRound2DataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostRound2DataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostRound2DataResponse proto.InternalMessageInfo

// MsgPostCommit is the Msg/PostCommit request type.
type MsgPostCommit struct {
	Participant string `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
	Commitment  []byte `protobuf:"bytes,2,opt,name=commitment,proto3" json:"commitment,omitempty"`
	DataReqId   uint64 `protobuf:"varint,3,opt,name=data_req_id,json=dataReqId,proto3" json:"data_req_id,omitempty"`
}

func (m *MsgPostCommit) Reset()         { *m = MsgPostCommit{} }
func (m *MsgPostCommit) String() string { return proto.CompactTextString(m) }
func (*MsgPostCommit) ProtoMessage()    {}
func (*MsgPostCommit) Descriptor() ([]byte, []int) {
	return fileDescriptor_240f06b5d3b6e8db, []int{6}
}
func (m *MsgPostCommit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostCommit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostCommit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostCommit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostCommit.Merge(m, src)
}
func (m *MsgPostCommit) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostCommit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostCommit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostCommit proto.InternalMessageInfo

func (m *MsgPostCommit) GetParticipant() string {
	if m != nil {
		return m.Participant
	}
	return ""
}

func (m *MsgPostCommit) GetCommitment() []byte {
	if m != nil {
		return m.Commitment
	}
	return nil
}

func (m *MsgPostCommit) GetDataReqId() uint64 {
	if m != nil {
		return m.DataReqId
	}
	return 0
}

// MsgPostCommitResponse defines the response structure for executing a
// MsgPostCommit message.
type MsgPostCommitResponse struct {
}

func (m *MsgPostCommitResponse) Reset()         { *m = MsgPostCommitResponse{} }
func (m *MsgPostCommitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPostCommitResponse) ProtoMessage()    {}
func (*MsgPostCommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_240f06b5d3b6e8db, []int{7}
}
func (m *MsgPostCommitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostCommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostCommitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostCommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostCommitResponse.Merge(m, src)
}
func (m *MsgPostCommitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostCommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostCommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostCommitResponse proto.InternalMessageInfo

// MsgPostSignatureShare is the Msg/PostSignatureShare request type.
type MsgPostSignatureShare struct {
	Participant    string `protobuf:"bytes,1,opt,name=participant,proto3" json:"participant,omitempty"`
	SignatureShare []byte `protobuf:"bytes,2,opt,name=signature_share,json=signatureShare,proto3" json:"signature_share,omitempty"`
	DataReqId      uint64 `protobuf:"varint,3,opt,name=data_req_id,json=dataReqId,proto3" json:"data_req_id,omitempty"`
}

func (m *MsgPostSignatureShare) Reset()         { *m = MsgPostSignatureShare{} }
func (m *MsgPostSignatureShare) String() string { return proto.CompactTextString(m) }
func (*MsgPostSignatureShare) ProtoMessage()    {}
func (*MsgPostSignatureShare) Descriptor() ([]byte, []int) {
	return fileDescriptor_240f06b5d3b6e8db, []int{8}
}
func (m *MsgPostSignatureShare) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostSignatureShare) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostSignatureShare.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostSignatureShare) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostSignatureShare.Merge(m, src)
}
func (m *MsgPostSignatureShare) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostSignatureShare) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostSignatureShare.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostSignatureShare proto.InternalMessageInfo

func (m *MsgPostSignatureShare) GetParticipant() string {
	if m != nil {
		return m.Participant
	}
	return ""
}

func (m *MsgPostSignatureShare) GetSignatureShare() []byte {
	if m != nil {
		return m.SignatureShare
	}
	return nil
}

func (m *MsgPostSignatureShare) GetDataReqId() uint64 {
	if m != nil {
		return m.DataReqId
	}
	return 0
}

// MsgPostSignatureShareResponse defines the response structure for executing a
// MsgPostSignatureShare message.
type MsgPostSignatureShareResponse struct {
}

func (m *MsgPostSignatureShareResponse) Reset()         { *m = MsgPostSignatureShareResponse{} }
func (m *MsgPostSignatureShareResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPostSignatureShareResponse) ProtoMessage()    {}
func (*MsgPostSignatureShareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_240f06b5d3b6e8db, []int{9}
}
func (m *MsgPostSignatureShareResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostSignatureShareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostSignatureShareResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostSignatureShareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostSignatureShareResponse.Merge(m, src)
}
func (m *MsgPostSignatureShareResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostSignatureShareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostSignatureShareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostSignatureShareResponse proto.InternalMessageInfo

// MsgPostSignatureShare is the Msg/PostSignatureShare request type.
type MsgPostDataRequests struct {
	User         string         `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	DataRequests []*DataRequest `protobuf:"bytes,2,rep,name=data_requests,json=dataRequests,proto3" json:"data_requests,omitempty"`
}

func (m *MsgPostDataRequests) Reset()         { *m = MsgPostDataRequests{} }
func (m *MsgPostDataRequests) String() string { return proto.CompactTextString(m) }
func (*MsgPostDataRequests) ProtoMessage()    {}
func (*MsgPostDataRequests) Descriptor() ([]byte, []int) {
	return fileDescriptor_240f06b5d3b6e8db, []int{10}
}
func (m *MsgPostDataRequests) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostDataRequests) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostDataRequests.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostDataRequests) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostDataRequests.Merge(m, src)
}
func (m *MsgPostDataRequests) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostDataRequests) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostDataRequests.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostDataRequests proto.InternalMessageInfo

func (m *MsgPostDataRequests) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *MsgPostDataRequests) GetDataRequests() []*DataRequest {
	if m != nil {
		return m.DataRequests
	}
	return nil
}

// MsgPostDataRequestsResponse defines the response structure for executing a
// MsgPostSignatureShare message.
type MsgPostDataRequestsResponse struct {
}

func (m *MsgPostDataRequestsResponse) Reset()         { *m = MsgPostDataRequestsResponse{} }
func (m *MsgPostDataRequestsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPostDataRequestsResponse) ProtoMessage()    {}
func (*MsgPostDataRequestsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_240f06b5d3b6e8db, []int{11}
}
func (m *MsgPostDataRequestsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPostDataRequestsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPostDataRequestsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPostDataRequestsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPostDataRequestsResponse.Merge(m, src)
}
func (m *MsgPostDataRequestsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPostDataRequestsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPostDataRequestsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPostDataRequestsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateParams)(nil), "mycelia.mycelia.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "mycelia.mycelia.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgPostRound1Data)(nil), "mycelia.mycelia.MsgPostRound1Data")
	proto.RegisterType((*MsgPostRound1DataResponse)(nil), "mycelia.mycelia.MsgPostRound1DataResponse")
	proto.RegisterType((*MsgPostRound2Data)(nil), "mycelia.mycelia.MsgPostRound2Data")
	proto.RegisterMapType((map[string][]byte)(nil), "mycelia.mycelia.MsgPostRound2Data.Round2DataEntry")
	proto.RegisterType((*MsgPostRound2DataResponse)(nil), "mycelia.mycelia.MsgPostRound2DataResponse")
	proto.RegisterType((*MsgPostCommit)(nil), "mycelia.mycelia.MsgPostCommit")
	proto.RegisterType((*MsgPostCommitResponse)(nil), "mycelia.mycelia.MsgPostCommitResponse")
	proto.RegisterType((*MsgPostSignatureShare)(nil), "mycelia.mycelia.MsgPostSignatureShare")
	proto.RegisterType((*MsgPostSignatureShareResponse)(nil), "mycelia.mycelia.MsgPostSignatureShareResponse")
	proto.RegisterType((*MsgPostDataRequests)(nil), "mycelia.mycelia.MsgPostDataRequests")
	proto.RegisterType((*MsgPostDataRequestsResponse)(nil), "mycelia.mycelia.MsgPostDataRequestsResponse")
}

func init() { proto.RegisterFile("mycelia/mycelia/tx.proto", fileDescriptor_240f06b5d3b6e8db) }

var fileDescriptor_240f06b5d3b6e8db = []byte{
	// 779 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x96, 0xbf, 0x4f, 0xdb, 0x5a,
	0x14, 0xc7, 0x63, 0x02, 0x48, 0x39, 0x09, 0x04, 0xfc, 0x78, 0x4a, 0x30, 0x60, 0xf2, 0xac, 0xf7,
	0x1e, 0x51, 0x04, 0xf1, 0xc3, 0xa0, 0xa7, 0xa7, 0xe8, 0xb5, 0x12, 0xb4, 0x1d, 0x3a, 0x20, 0x21,
	0x43, 0xa5, 0x8a, 0x25, 0xbd, 0xc4, 0xb7, 0x8e, 0xdb, 0xd8, 0x0e, 0xbe, 0x37, 0x94, 0x6c, 0x55,
	0xc7, 0x4e, 0x9d, 0xfb, 0x0f, 0xb4, 0x23, 0x43, 0x37, 0xa6, 0x6e, 0x8c, 0xa8, 0x13, 0xea, 0x50,
	0x55, 0x30, 0xf0, 0x6f, 0x54, 0xb6, 0xaf, 0x1d, 0x3b, 0x3f, 0x48, 0x5a, 0x96, 0xd8, 0x3e, 0xe7,
	0x7b, 0x7e, 0x7c, 0x8e, 0x7d, 0x1c, 0x43, 0xde, 0x6c, 0xd7, 0x70, 0xc3, 0x40, 0x72, 0x70, 0xa4,
	0x27, 0xe5, 0xa6, 0x63, 0x53, 0x9b, 0xcf, 0x32, 0x4b, 0x99, 0x1d, 0x85, 0x59, 0x64, 0x1a, 0x96,
	0x2d, 0x7b, 0xbf, 0xbe, 0x46, 0xc8, 0xd5, 0x6c, 0x62, 0xda, 0x44, 0x36, 0x89, 0x2e, 0x1f, 0xaf,
	0xbb, 0x07, 0xe6, 0x98, 0xf7, 0x1d, 0x55, 0xef, 0x4a, 0xf6, 0x2f, 0x98, 0x6b, 0x4e, 0xb7, 0x75,
	0xdb, 0xb7, 0xbb, 0x67, 0xcc, 0xba, 0xd8, 0xdd, 0x47, 0x13, 0x39, 0xc8, 0x0c, 0x62, 0x16, 0x7a,
	0xba, 0x6c, 0x37, 0x31, 0x73, 0x4a, 0x67, 0x1c, 0x64, 0x77, 0x88, 0xfe, 0xa4, 0xa9, 0x21, 0x8a,
	0x77, 0xbd, 0x30, 0xfe, 0x5f, 0x48, 0xa1, 0x16, 0xad, 0xdb, 0x8e, 0x41, 0xdb, 0x79, 0xae, 0xc0,
	0x15, 0x53, 0xdb, 0xf9, 0x2f, 0x9f, 0xd6, 0xe6, 0x58, 0x27, 0x5b, 0x9a, 0xe6, 0x60, 0x42, 0xf6,
	0xa8, 0x63, 0x58, 0xba, 0xda, 0x91, 0xf2, 0x15, 0x98, 0xf4, 0x0b, 0xe7, 0xc7, 0x0a, 0x5c, 0x31,
	0xad, 0xe4, 0xca, 0x5d, 0x53, 0x28, 0xfb, 0x05, 0xb6, 0x53, 0xe7, 0xdf, 0x96, 0x13, 0x1f, 0x6f,
	0x4e, 0x4b, 0x9c, 0xca, 0x22, 0x2a, 0x9b, 0x6f, 0x6e, 0x4e, 0x4b, 0x9d, 0x5c, 0x6f, 0x6f, 0x4e,
	0x4b, 0x7f, 0x04, 0xfd, 0x9e, 0x84, 0x9d, 0x77, 0x75, 0x2a, 0xcd, 0x43, 0xae, 0xcb, 0xa4, 0x62,
	0xd2, 0xb4, 0x2d, 0x82, 0xa5, 0x0f, 0x1c, 0xcc, 0xee, 0x10, 0x7d, 0xd7, 0x26, 0x54, 0xb5, 0x5b,
	0x96, 0xb6, 0xfe, 0x10, 0x51, 0xc4, 0x57, 0x20, 0xdd, 0x44, 0x0e, 0x35, 0x6a, 0x46, 0x13, 0x59,
	0x74, 0x28, 0x5c, 0x54, 0xcc, 0x17, 0x20, 0xe3, 0xb8, 0x99, 0xaa, 0xeb, 0x55, 0x0d, 0x51, 0xe4,
	0x41, 0x66, 0x54, 0x70, 0xc2, 0xec, 0x3e, 0x44, 0x34, 0xc6, 0xc5, 0x58, 0xee, 0x8b, 0xd1, 0xe9,
	0x4b, 0x5a, 0x80, 0xf9, 0x9e, 0x46, 0x43, 0x8c, 0xf7, 0x63, 0x71, 0x0c, 0xe5, 0xce, 0x18, 0xfb,
	0x01, 0x86, 0x12, 0x60, 0x24, 0x8b, 0x69, 0x45, 0xe9, 0xb9, 0x57, 0x3d, 0x55, 0xcb, 0x9d, 0xd3,
	0x47, 0x16, 0x75, 0xda, 0x0c, 0xdd, 0x33, 0x08, 0xf7, 0x20, 0xdb, 0xe5, 0xe6, 0x67, 0x20, 0xf9,
	0x12, 0xb3, 0x07, 0x48, 0x75, 0x4f, 0xf9, 0x39, 0x98, 0x38, 0x46, 0x8d, 0x16, 0x66, 0xa3, 0xf3,
	0x2f, 0x2a, 0x63, 0xff, 0x71, 0xbf, 0x34, 0x39, 0xa5, 0x7b, 0x72, 0x4a, 0x6c, 0x72, 0x9f, 0x39,
	0x98, 0x62, 0xde, 0x07, 0xb6, 0x69, 0x1a, 0xf4, 0x4e, 0x53, 0x13, 0x01, 0x6a, 0x5e, 0x16, 0x13,
	0x5b, 0x34, 0xb8, 0xf5, 0x1d, 0x0b, 0x2f, 0x42, 0xda, 0x9d, 0x66, 0xd5, 0xc1, 0x47, 0x55, 0x43,
	0xcb, 0x27, 0x0b, 0x5c, 0x71, 0x5c, 0x4d, 0x69, 0x5e, 0x43, 0x47, 0x8f, 0xb5, 0x9f, 0x05, 0xf4,
	0x3b, 0x96, 0x72, 0xf0, 0x7b, 0xcc, 0x10, 0xc2, 0x7d, 0xe5, 0x42, 0xcf, 0x9e, 0xa1, 0x5b, 0x88,
	0xb6, 0x1c, 0xbc, 0x57, 0x47, 0x0e, 0xbe, 0x13, 0xe4, 0x0a, 0x64, 0x49, 0x90, 0xad, 0x4a, 0xdc,
	0x74, 0x8c, 0x74, 0x9a, 0xc4, 0x8b, 0x0c, 0xa3, 0xfd, 0xbf, 0x1f, 0xed, 0xca, 0x40, 0xda, 0x38,
	0x82, 0xb4, 0x0c, 0x4b, 0x7d, 0x1d, 0x21, 0xfd, 0x19, 0x07, 0xbf, 0x31, 0x85, 0x7f, 0xcb, 0x8f,
	0x5a, 0x98, 0x50, 0xc2, 0xaf, 0xc2, 0x78, 0x8b, 0x60, 0x67, 0x28, 0xb4, 0xa7, 0xe2, 0xb7, 0x60,
	0x2a, 0x80, 0xf0, 0xc2, 0xd9, 0x26, 0x2c, 0xf6, 0x6c, 0x42, 0xa4, 0x86, 0x9a, 0xd1, 0x22, 0x05,
	0x2b, 0x1b, 0x2e, 0xa7, 0x97, 0xcd, 0x05, 0xfc, 0x6b, 0x20, 0x60, 0xb4, 0x4b, 0x69, 0x09, 0x16,
	0xfa, 0x98, 0x03, 0x38, 0xe5, 0x72, 0x1c, 0x92, 0x3b, 0x44, 0xe7, 0x0f, 0x20, 0x13, 0x7b, 0x2b,
	0x17, 0xfa, 0x6d, 0x68, 0x54, 0x21, 0x14, 0x87, 0x29, 0x82, 0x1a, 0xfc, 0x33, 0x98, 0xee, 0x7a,
	0x31, 0x4a, 0xb7, 0xee, 0xbf, 0xa7, 0x11, 0x4a, 0xc3, 0x35, 0x7d, 0x2b, 0x28, 0x23, 0x54, 0x50,
	0x46, 0xa8, 0x10, 0xdb, 0x6f, 0x7e, 0x1f, 0x20, 0xb2, 0xdb, 0xe2, 0xa0, 0x48, 0xdf, 0x2f, 0xfc,
	0x7d, 0xbb, 0x3f, 0xcc, 0xda, 0x00, 0xbe, 0xcf, 0x52, 0x0d, 0x8c, 0x8e, 0xeb, 0x84, 0xf2, 0x68,
	0xba, 0xb0, 0xda, 0x73, 0x98, 0xe9, 0x79, 0x88, 0xff, 0x1c, 0x94, 0x23, 0xaa, 0x12, 0x56, 0x47,
	0x51, 0x05, 0x75, 0x84, 0x89, 0xd7, 0xee, 0x9f, 0xed, 0xf6, 0xd3, 0xf3, 0x2b, 0x91, 0xbb, 0xb8,
	0x12, 0xb9, 0xef, 0x57, 0x22, 0xf7, 0xee, 0x5a, 0x4c, 0x5c, 0x5c, 0x8b, 0x89, 0xcb, 0x6b, 0x31,
	0x71, 0x70, 0x5f, 0x37, 0x68, 0xbd, 0x75, 0x58, 0xae, 0xd9, 0xa6, 0xfc, 0x02, 0xb5, 0x35, 0x6c,
	0xbd, 0x32, 0x2c, 0xad, 0x81, 0x65, 0x4c, 0xeb, 0x1a, 0xb6, 0x8e, 0xb1, 0xb3, 0xa6, 0xfc, 0xa3,
	0x6c, 0xca, 0xbd, 0x4f, 0xb8, 0xf7, 0x31, 0x71, 0x38, 0xe9, 0x7d, 0x4d, 0x6c, 0xfc, 0x08, 0x00,
	0x00, 0xff, 0xff, 0x21, 0xa3, 0x74, 0x09, 0x12, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// PostRound1Data defines an operation for posting round 1 data for each
	// participant. This is the first step in the key generation for forst
	// signatures.
	PostRound1Data(ctx context.Context, in *MsgPostRound1Data, opts ...grpc.CallOption) (*MsgPostRound1DataResponse, error)
	// PostRound2Data defines an operation for posting round 2 data for each
	// participant This is the second step in the key generation for forst
	// signatures.
	PostRound2Data(ctx context.Context, in *MsgPostRound2Data, opts ...grpc.CallOption) (*MsgPostRound2DataResponse, error)
	// PostCommit defines an operation for posting commits for each
	// participant.
	PostCommit(ctx context.Context, in *MsgPostCommit, opts ...grpc.CallOption) (*MsgPostCommitResponse, error)
	// PostSignatureShare defines an operation for posting signature share for each
	// participant.
	PostSignatureShare(ctx context.Context, in *MsgPostSignatureShare, opts ...grpc.CallOption) (*MsgPostSignatureShareResponse, error)
	// PostDataRequests defines an operation for posting data requests.
	PostDataRequests(ctx context.Context, in *MsgPostDataRequests, opts ...grpc.CallOption) (*MsgPostDataRequestsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/mycelia.mycelia.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PostRound1Data(ctx context.Context, in *MsgPostRound1Data, opts ...grpc.CallOption) (*MsgPostRound1DataResponse, error) {
	out := new(MsgPostRound1DataResponse)
	err := c.cc.Invoke(ctx, "/mycelia.mycelia.Msg/PostRound1Data", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PostRound2Data(ctx context.Context, in *MsgPostRound2Data, opts ...grpc.CallOption) (*MsgPostRound2DataResponse, error) {
	out := new(MsgPostRound2DataResponse)
	err := c.cc.Invoke(ctx, "/mycelia.mycelia.Msg/PostRound2Data", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PostCommit(ctx context.Context, in *MsgPostCommit, opts ...grpc.CallOption) (*MsgPostCommitResponse, error) {
	out := new(MsgPostCommitResponse)
	err := c.cc.Invoke(ctx, "/mycelia.mycelia.Msg/PostCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PostSignatureShare(ctx context.Context, in *MsgPostSignatureShare, opts ...grpc.CallOption) (*MsgPostSignatureShareResponse, error) {
	out := new(MsgPostSignatureShareResponse)
	err := c.cc.Invoke(ctx, "/mycelia.mycelia.Msg/PostSignatureShare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PostDataRequests(ctx context.Context, in *MsgPostDataRequests, opts ...grpc.CallOption) (*MsgPostDataRequestsResponse, error) {
	out := new(MsgPostDataRequestsResponse)
	err := c.cc.Invoke(ctx, "/mycelia.mycelia.Msg/PostDataRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// UpdateParams defines a (governance) operation for updating the module
	// parameters. The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// PostRound1Data defines an operation for posting round 1 data for each
	// participant. This is the first step in the key generation for forst
	// signatures.
	PostRound1Data(context.Context, *MsgPostRound1Data) (*MsgPostRound1DataResponse, error)
	// PostRound2Data defines an operation for posting round 2 data for each
	// participant This is the second step in the key generation for forst
	// signatures.
	PostRound2Data(context.Context, *MsgPostRound2Data) (*MsgPostRound2DataResponse, error)
	// PostCommit defines an operation for posting commits for each
	// participant.
	PostCommit(context.Context, *MsgPostCommit) (*MsgPostCommitResponse, error)
	// PostSignatureShare defines an operation for posting signature share for each
	// participant.
	PostSignatureShare(context.Context, *MsgPostSignatureShare) (*MsgPostSignatureShareResponse, error)
	// PostDataRequests defines an operation for posting data requests.
	PostDataRequests(context.Context, *MsgPostDataRequests) (*MsgPostDataRequestsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) PostRound1Data(ctx context.Context, req *MsgPostRound1Data) (*MsgPostRound1DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRound1Data not implemented")
}
func (*UnimplementedMsgServer) PostRound2Data(ctx context.Context, req *MsgPostRound2Data) (*MsgPostRound2DataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostRound2Data not implemented")
}
func (*UnimplementedMsgServer) PostCommit(ctx context.Context, req *MsgPostCommit) (*MsgPostCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCommit not implemented")
}
func (*UnimplementedMsgServer) PostSignatureShare(ctx context.Context, req *MsgPostSignatureShare) (*MsgPostSignatureShareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostSignatureShare not implemented")
}
func (*UnimplementedMsgServer) PostDataRequests(ctx context.Context, req *MsgPostDataRequests) (*MsgPostDataRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDataRequests not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycelia.mycelia.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PostRound1Data_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPostRound1Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PostRound1Data(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycelia.mycelia.Msg/PostRound1Data",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PostRound1Data(ctx, req.(*MsgPostRound1Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PostRound2Data_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPostRound2Data)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PostRound2Data(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycelia.mycelia.Msg/PostRound2Data",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PostRound2Data(ctx, req.(*MsgPostRound2Data))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PostCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPostCommit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PostCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycelia.mycelia.Msg/PostCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PostCommit(ctx, req.(*MsgPostCommit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PostSignatureShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPostSignatureShare)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PostSignatureShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycelia.mycelia.Msg/PostSignatureShare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PostSignatureShare(ctx, req.(*MsgPostSignatureShare))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PostDataRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPostDataRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PostDataRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mycelia.mycelia.Msg/PostDataRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PostDataRequests(ctx, req.(*MsgPostDataRequests))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mycelia.mycelia.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "PostRound1Data",
			Handler:    _Msg_PostRound1Data_Handler,
		},
		{
			MethodName: "PostRound2Data",
			Handler:    _Msg_PostRound2Data_Handler,
		},
		{
			MethodName: "PostCommit",
			Handler:    _Msg_PostCommit_Handler,
		},
		{
			MethodName: "PostSignatureShare",
			Handler:    _Msg_PostSignatureShare_Handler,
		},
		{
			MethodName: "PostDataRequests",
			Handler:    _Msg_PostDataRequests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mycelia/mycelia/tx.proto",
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPostRound1Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostRound1Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostRound1Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Round_1Data) > 0 {
		i -= len(m.Round_1Data)
		copy(dAtA[i:], m.Round_1Data)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Round_1Data)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPostRound1DataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostRound1DataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostRound1DataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPostRound2Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostRound2Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostRound2Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Round_2Data) > 0 {
		for k := range m.Round_2Data {
			v := m.Round_2Data[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintTx(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTx(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTx(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPostRound2DataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostRound2DataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostRound2DataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPostCommit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostCommit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostCommit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataReqId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DataReqId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Commitment) > 0 {
		i -= len(m.Commitment)
		copy(dAtA[i:], m.Commitment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Commitment)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPostCommitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostCommitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostCommitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPostSignatureShare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostSignatureShare) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostSignatureShare) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DataReqId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DataReqId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SignatureShare) > 0 {
		i -= len(m.SignatureShare)
		copy(dAtA[i:], m.SignatureShare)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SignatureShare)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Participant) > 0 {
		i -= len(m.Participant)
		copy(dAtA[i:], m.Participant)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Participant)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPostSignatureShareResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostSignatureShareResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostSignatureShareResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPostDataRequests) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostDataRequests) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostDataRequests) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DataRequests) > 0 {
		for iNdEx := len(m.DataRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintTx(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPostDataRequestsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPostDataRequestsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPostDataRequestsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPostRound1Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Round_1Data)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPostRound1DataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPostRound2Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Round_2Data) > 0 {
		for k, v := range m.Round_2Data {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovTx(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovTx(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTx(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MsgPostRound2DataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPostCommit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Commitment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DataReqId != 0 {
		n += 1 + sovTx(uint64(m.DataReqId))
	}
	return n
}

func (m *MsgPostCommitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPostSignatureShare) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Participant)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SignatureShare)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DataReqId != 0 {
		n += 1 + sovTx(uint64(m.DataReqId))
	}
	return n
}

func (m *MsgPostSignatureShareResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPostDataRequests) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.DataRequests) > 0 {
		for _, e := range m.DataRequests {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgPostDataRequestsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostRound1Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostRound1Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostRound1Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round_1Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Round_1Data = append(m.Round_1Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Round_1Data == nil {
				m.Round_1Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostRound1DataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostRound1DataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostRound1DataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostRound2Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostRound2Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostRound2Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round_2Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Round_2Data == nil {
				m.Round_2Data = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTx
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTx
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthTx
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthTx
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTx(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthTx
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Round_2Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostRound2DataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostRound2DataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostRound2DataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostCommit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostCommit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostCommit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitment = append(m.Commitment[:0], dAtA[iNdEx:postIndex]...)
			if m.Commitment == nil {
				m.Commitment = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataReqId", wireType)
			}
			m.DataReqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataReqId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostCommitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostCommitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostCommitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostSignatureShare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostSignatureShare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostSignatureShare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participant", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participant = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureShare", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureShare = append(m.SignatureShare[:0], dAtA[iNdEx:postIndex]...)
			if m.SignatureShare == nil {
				m.SignatureShare = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataReqId", wireType)
			}
			m.DataReqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataReqId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostSignatureShareResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostSignatureShareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostSignatureShareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostDataRequests) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostDataRequests: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostDataRequests: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataRequests = append(m.DataRequests, &DataRequest{})
			if err := m.DataRequests[len(m.DataRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPostDataRequestsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPostDataRequestsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPostDataRequestsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
